import PlayerCard from ":)/components/v2/player-card";
import { api } from ":)/utils/api";
import type {
  NextPage,
  GetServerSideProps,
  GetServerSidePropsContext,
} from "next";
import Head from "next/head";

interface RosterPageProps {
  id: string;
  leagueId: string;
}

const settings = {
  includePreseason: false,
};

const RosterPage: NextPage<RosterPageProps> = ({ id, leagueId }) => {
  const {
    data: userData,
    isLoading: isLoadingUserData,
    isError: isErrorUserData,
  } = api.sleeper.getUser.useQuery({
    userId: id,
  });

  const {
    data: allRosters,
    isLoading: isLoadingAllRosters,
    isError: isErrorAllRosters,
  } = api.sleeper.getRosters.useQuery({
    leagueId: leagueId,
  });

  const {
    data: leagueData,
    isLoading: isLoadingLeagueData,
    isError: isErrorLeagueData,
  } = api.sleeper.getLeagueUsers.useQuery({
    leagueId: leagueId,
  });

  const pageRoster = allRosters?.find((roster) => roster.owner_id === id);
  const pageUserData = leagueData?.find(
    (roster) => roster?.user_id === pageRoster?.owner_id
  );

  const {
    data: rosterPlayers,
    isLoading: isLoadingRosterPlayers,
    isError: isErrorRosterPlayers,
  } = api.players.getRosterPlayers.useQuery(
    {
      player_ids: pageRoster?.players ?? [],
    },
    {
      enabled: !!pageRoster?.players,
    }
  );

  const playerWithPointsAggregated = rosterPlayers?.map((player) => {
    const fantasyPoints = player.PlayerStatline.map((statline) => {
      // NOTE: Exclude games before 2024 regular season (PRESEASON)
      if (statline.game.season_phase === "PRE" && !settings.includePreseason) {
        return 0;
      }

      return statline.fantasy_pts;
    });
    const aggregate = fantasyPoints.reduce((acc, curr) => acc + curr, 0);
    return { ...player, aggregate };
  });

  const playerWithGameCount = playerWithPointsAggregated?.map((player) => {
    const count = player.PlayerStatline.reduce((acc, curr) => {
      if (curr.game.season_phase === "REG") {
        return acc + 1;
      }

      return acc;
    }, 0);

    return { ...player, count };
  });

  // sort the players by position in this order: QB, WR, RB, TE, K, DEF
  // then sort by aggregate points
  const sortedPlayers = playerWithGameCount?.sort((a, b) => {
    if (!a.position || !b.position) return 0;

    const positionOrder = ["QB", "WR", "RB", "TE", "K", "DEF"];
    const positionA = positionOrder.indexOf(a.position);
    const positionB = positionOrder.indexOf(b.position);

    if (positionA === positionB) {
      return b.aggregate - a.aggregate;
    }

    return positionA - positionB;
  });

  return (
    <>
      <Head>
        <title>
          {`${
            pageUserData?.metadata.team_name ?? `Team ${userData?.username}`
          }'s Roster`}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col overflow-hidden bg-slate-800 pb-32">
        <div className="container">
          <section className="my-6 grid md:grid-cols-2">
            <div>
              <h1 className="text-4xl font-bold text-white">
                {pageUserData?.metadata.team_name ??
                  `Team ${userData?.username}`}
              </h1>
              <h4 className="text-sm text-slate-500">{userData?.username}</h4>
            </div>
            <div className="grid grid-cols-3 items-center pt-4 text-white md:pt-0">
              <div className="flex flex-col place-items-center">
                <p className="text-lg font-bold">
                  {pageRoster?.settings.wins} - {pageRoster?.settings.losses}
                </p>
                <p className="text-xs text-slate-500">Record</p>
              </div>
              <div className="flex flex-col place-items-center">
                <p className="text-lg font-bold">
                  {pageRoster?.settings.fpts}.
                  {pageRoster?.settings.fpts_decimal}
                </p>
                <p className="text-xs text-slate-500">Points for</p>
              </div>
              <div className="flex flex-col place-items-center">
                <p className="text-lg font-bold">
                  {pageRoster?.settings.fpts_against}.
                  {pageRoster?.settings.fpts_against_decimal}
                </p>
                <p className="text-xs text-slate-500">Points against</p>
              </div>
            </div>
          </section>
          <ul role="list" className="flex w-full flex-grow flex-col gap-4">
            {sortedPlayers?.map((player) => {
              return (
                <PlayerCard
                  key={player.player_id}
                  player={player}
                  fantasy_points={player.aggregate}
                  games_played={player.count}
                />
              );
            })}
          </ul>
        </div>
      </main>
    </>
  );
};

export default RosterPage;

export const getServerSideProps: GetServerSideProps<RosterPageProps> = async (
  context: GetServerSidePropsContext
) => {
  const { id, leagueId } = context.query;

  // empty await to prevent error
  await Promise.resolve();

  // Pass data to the page via props
  return { props: { id: id as string, leagueId: leagueId as string } };
};
