import LeagueDisplay from ":)/components/v2/league-display";
import PlayerCard from ":)/components/v2/player-card";
import { api } from ":)/utils/api";
import type {
  NextPage,
  GetServerSideProps,
  GetServerSidePropsContext,
} from "next";
import Head from "next/head";

interface LeaguePageProps {
  leagueId: string;
}

const LeaguePage: NextPage<LeaguePageProps> = ({
  leagueId,
}: LeaguePageProps) => {
  const {
    data: leagueData,
    isLoading: leagueIsLoading,
    isError: leagueIsError,
  } = api.sleeper.getLeague.useQuery({
    leagueId,
  });
  const {
    data: leagueUsers,
    isLoading: leagueUsersIsLoading,
    isError: leagueUsersIsError,
  } = api.sleeper.getLeagueUsers.useQuery({
    leagueId,
  });
  if (leagueIsLoading || leagueUsersIsLoading) {
    return <div>Loading...</div>;
  }

  if (leagueIsError || leagueUsersIsError) {
    return <div>Error</div>;
  }

  return (
    <>
      <Head>
        <title>{`League Data`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container flex min-h-screen flex-col overflow-hidden bg-slate-800 pb-32">
        <h1>{leagueData?.name}</h1>
        <p>Draft ID: {leagueData?.draft_id}</p>
        <LeagueDisplay leagueId={leagueId} />
      </main>
    </>
  );
};

export default LeaguePage;

export const getServerSideProps: GetServerSideProps<LeaguePageProps> = async (
  context: GetServerSidePropsContext
) => {
  const { leagueId } = context.query;

  // empty await to prevent error
  await Promise.resolve();

  // Pass data to the page via props
  return { props: { leagueId: leagueId as string } };
};
